# Screenreader Proofreader
name: <img> Locator

# Trigger the event when the repo is starred (as close to a manual run as possible with the current API)
on:
  workflow_dispatch:

jobs:
  # This job contains a job called "scan"
  scan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Step to count total number of <img> tags
      - name: Count total number of <img> tags
        run: |
          img_count=$(grep -Ro '<img' * | wc -l)
          echo "Total <img> tags found: $img_count"
          echo "img_count=$img_count" >> $GITHUB_ENV

        # Displays all <img> tags with path
      - name: Check for <img tags
        run: |
          if ! grep -R "<img" *; then
            echo "No <img> tags found."
          fi

      # Search the directory for files that contain "https://cdn"
      # This would indicate that the file contains an embedded figure which needs alt-text
      - name: Total figure count
        run: |
          url_count=$(grep -R "https://storage\|https://cdn" * | wc -l)
          echo "Total count of URLs: $url_count"
          if [ "$img_count" -eq 0 ] && [ "$url_count" -eq 0 ]; then
            echo "No <img> tags or image urls found. Exiting."
            exit 1
          fi

      - name: List of files which contain figures
        #run: grep -RlE "https://storage|https://cdn" * > filepaths.txt
        run: |
          if ! grep -RlE "https://storage|https://cdn" * > filepaths.txt; then
            echo "No matches found for file paths."
            exit 1
          fi
          cat filepaths.txt

      # - name: List of files which contain <img> tags
      #   run: grep -Rl "<img" *

      # Step to find <img> tags and extract required information
      # https://
      - name: Extract file paths and src from <img> tags and save to CSV
        run: |
          if ! grep -RohP 'https:\/\/(storage|cdn)[^\)]+' * > urls.txt; then
            echo "No matches found for URLs."
            exit 1
          fi
          cat urls.txt

      - name: Combine file paths and URLs into a CSV
        run: |
          echo "File Path,Image URL" > images.csv
          paste -d ',' filepaths.txt urls.txt >> images.csv
          cat images.csv

      # # <img>
      # - name: Extract file paths and src from <img> tags and save to CSV
      #   run: |
      #     echo "File Path,Image URL" > images.csv
      #     grep -Ro "https://[^)]*" * | sed -nE 's/.*\((https:\/\/[^)]+)\).*/\1/p' >> images.csv
      #     cat images.csv

      - name: Upload CSV file as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: fundamentals-of-python-3e-csv
          path: images.csv
          retention-days: 1
